{
  "name": "md5sum",
  "shortDescription": "compute and check MD5 message digest",
  "longDescription": "Print or check MD5 (128-bit) checksums.",
  "syntaxes": [
    "md5sum [OPTION]... [FILE]..."
  ],
  "options": [
    {
      "name": "binary",
      "argumentType": "NO_ARGUMENT",
      "equivalent": "b",
      "description": "Treat each input file as binary, by reading it in binary mode and outputting a ‘*’ flag.  This is the inverse of ‘--text’.  On systems like GNU that do not distinguish between binary and text files, this option merely flags each input mode as binary: the MD5 checksum is unaffected.  This option is the default on systems like MS-DOS that distinguish between binary and text files, except for reading standard input when standard input is a terminal.",
      "isLong": true
    },
    {
      "name": "check",
      "argumentType": "NO_ARGUMENT",
      "equivalent": "c",
      "description": "Read file names and checksum information (not data) from each FILE (or from stdin if no FILE was specified) and report whether the checksums match the contents of the named files.  The input to this mode of ‘md5sum’ is usually the output of a prior, checksum-generating run of ‘md5sum’.  Three input formats are supported.  Either the default output format described above, the ‘--tag’ output format, or the BSD reversed mode format which is similar to the default mode, but doesn’t use a character to distinguish binary and text modes.",
      "isLong": true
    },
    {
      "name": "ignore-missing",
      "argumentType": "NO_ARGUMENT",
      "description": "This option is useful only when verifying checksums.  When verifying checksums, don’t fail or report any status for missing files.  This is useful when verifying a subset of downloaded files given a larger list of checksums.",
      "isLong": true
    },
    {
      "name": "quiet",
      "argumentType": "NO_ARGUMENT",
      "description": "This option is useful only when verifying checksums.  When verifying checksums, don’t generate an ’OK’ message per successfully checked file.  Files that fail the verification are reported in the default one-line-per-file format.  If there is any checksum mismatch, print a warning summarizing the failures to standard error.",
      "isLong": true
    },
    {
      "name": "status",
      "argumentType": "NO_ARGUMENT",
      "description": "This option is useful only when verifying checksums.  When verifying checksums, don’t generate the default one-line-per-file diagnostic and don’t output the warning summarizing any failures. Failures to open or read a file still evoke individual diagnostics to standard error.  If all listed files are readable and are consistent with the associated MD5 checksums, exit successfully. Otherwise exit with a status code indicating there was a failure.",
      "isLong": true
    },
    {
      "name": "text",
      "argumentType": "NO_ARGUMENT",
      "equivalent": "t",
      "description": "Treat each input file as text, by reading it in text mode and outputting a ‘ ’ flag.  This is the inverse of ‘--binary’.  This option is the default on systems like GNU that do not distinguish between binary and text files.  On other systems, it is the default for reading standard input when standard input is a terminal.  This mode is never defaulted to if ‘--tag’ is used.",
      "isLong": true
    },
    {
      "name": "warn",
      "argumentType": "NO_ARGUMENT",
      "equivalent": "w",
      "description": "When verifying checksums, warn about improperly formatted MD5 checksum lines.  This option is useful only if all but a few lines in the checked input are valid.",
      "isLong": true
    },
    {
      "name": "strict",
      "argumentType": "NO_ARGUMENT",
      "description": "When verifying checksums, if one or more input line is invalid, exit nonzero after all warnings have been issued.",
      "isLong": true
    },
    {
      "name": "tag",
      "argumentType": "NO_ARGUMENT",
      "description": "Output BSD style checksums, which indicate the checksum algorithm used.  As a GNU extension, file names with problematic characters are escaped as described above, with the same escaping indicator of ‘\\’ at the start of the line, being used.  The ‘--tag’ option implies binary mode, and is disallowed with ‘--text’ mode as supporting that would unnecessarily complicate the output format, while providing little benefit.",
      "isLong": true
    },
    {
      "name": "help",
      "argumentType": "NO_ARGUMENT",
      "isLong": true
    },
    {
      "name": "version",
      "argumentType": "NO_ARGUMENT",
      "isLong": true
    }
  ]
}